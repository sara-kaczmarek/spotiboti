name: Update Recent Tracks

on:
  schedule:
    # Run every 6 hours (at 00:00, 06:00, 12:00, 18:00 UTC)
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-tracks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pandas spotipy

      - name: Create Spotify auth cache
        run: |
          mkdir -p .streamlit
          cat > .streamlit/secrets.toml << EOF
          SPOTIFY_CLIENT_ID = "${{ secrets.SPOTIFY_CLIENT_ID }}"
          SPOTIFY_CLIENT_SECRET = "${{ secrets.SPOTIFY_CLIENT_SECRET }}"
          EOF

          # Create .spotify_cache with refresh token
          cat > .spotify_cache << EOF
          {
            "access_token": "placeholder",
            "token_type": "Bearer",
            "expires_in": 3600,
            "refresh_token": "${{ secrets.SPOTIFY_REFRESH_TOKEN }}",
            "scope": "user-read-recently-played user-read-playback-state user-library-read user-top-read",
            "expires_at": 0
          }
          EOF

      - name: Fetch and update recent tracks
        env:
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
        run: |
          python update_recent_tracks.py

      - name: Commit and push if changed
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'

          # Add only the genre cache (enriched data is no longer tracked in git)
          git add data/artist_genres_cache.json

          # Commit and push if there are changes
          if ! git diff --quiet || ! git diff --staged --quiet; then
            git commit -m "üéµ Auto-update: Added recent tracks [$(date +'%Y-%m-%d %H:%M UTC')]"
            git push
          else
            echo "No changes to commit"
          fi

      - name: Update GitHub release with new data
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if enriched data file exists and was updated
          if [ -f "data/enriched_spotify_data.json" ]; then
            echo "üì¶ Updating GitHub release with new enriched data..."

            # Get today's date for release tag
            RELEASE_TAG="v$(date +'%Y.%m.%d')"

            # Check if release exists
            if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
              echo "üìù Updating existing release: $RELEASE_TAG"
              # Delete old asset and upload new one
              gh release upload "$RELEASE_TAG" data/enriched_spotify_data.json --clobber
            else
              echo "üÜï Creating new release: $RELEASE_TAG"
              # Get record count for release notes
              RECORD_COUNT=$(python3 -c "import json; print(len(json.load(open('data/enriched_spotify_data.json'))))" 2>/dev/null || echo "unknown")

              # Create new release
              gh release create "$RELEASE_TAG" \
                --title "Enriched Data - $(date +'%Y-%m-%d')" \
                --notes "üìä Enriched Spotify streaming history dataset

**Auto-updated:** $(date +'%Y-%m-%d %H:%M UTC')

- Contains $RECORD_COUNT listening records
- Includes genre enrichment
- File size: $(du -h data/enriched_spotify_data.json | cut -f1)

This release is automatically updated every 6 hours by the GitHub Actions workflow." \
                data/enriched_spotify_data.json
            fi

            echo "‚úÖ Release updated successfully!"
          else
            echo "‚ö†Ô∏è  Enriched data file not found, skipping release update"
          fi
